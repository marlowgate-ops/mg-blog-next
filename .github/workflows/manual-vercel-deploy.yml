name: Manual Vercel Deploy

on:
  workflow_dispatch: {}   # 手動のみ（自動発火なし）

concurrency:
  group: vercel-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      # ジョブ全体で参照できるように固定（CLIはこの環境変数でも認証可能）
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable package manager (auto)
        shell: bash
        run: |
          echo "Lockfiles in repo:"
          ls -1 pnpm-lock.yaml yarn.lock package-lock.json 2>/dev/null || true

          if [ -f pnpm-lock.yaml ]; then
            echo "==> Use pnpm via corepack"
            corepack enable
            corepack prepare pnpm@9 --activate
            pnpm -v
            PKG_MGR=pnpm
          elif [ -f yarn.lock ]; then
            echo "==> Use yarn via corepack"
            corepack enable
            corepack prepare yarn@4 --activate || true
            yarn -v || true
            PKG_MGR=yarn
          else
            echo "==> Use npm"
            npm -v
            PKG_MGR=npm
          fi

          echo "PKG_MGR=$PKG_MGR" >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          if [ "$PKG_MGR" = "pnpm" ]; then
            pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
          elif [ "$PKG_MGR" = "yarn" ]; then
            yarn install --immutable || yarn install
          else
            if [ -f package-lock.json ]; then npm ci || npm install; else npm install; fi
          fi

      - name: Build
        shell: bash
        run: |
          if [ "$PKG_MGR" = "pnpm" ]; then
            pnpm build
          elif [ "$PKG_MGR" = "yarn" ]; then
            yarn build
          else
            npm run build
          fi

      - name: Verify Vercel credentials (whoami + fingerprints)
        shell: bash
        continue-on-error: true
        run: |
          echo "## env vars present?"
          env | grep -E '^VERCEL_(TOKEN|ORG_ID|PROJECT_ID)=' | sed 's/=.*/=*** (masked)/'

          echo "## Vercel whoami (with --token)"
          npx -y vercel@latest whoami --token="$VERCEL_TOKEN" || echo "::warning title=whoami failed::Check token or org/project ids"

          echo "## Fingerprints (SHA256)"
          printf %s "$VERCEL_TOKEN"      | sha256sum | awk '{print $1}' > token.sha
          printf %s "$VERCEL_ORG_ID"     | sha256sum | awk '{print $1}' > org.sha
          printf %s "$VERCEL_PROJECT_ID" | sha256sum | awk '{print $1}' > project.sha

          echo "::notice title=VERCEL_TOKEN_SHA256::$(cat token.sha)"
          echo "::notice title=VERCEL_ORG_ID_SHA256::$(cat org.sha)"
          echo "::notice title=VERCEL_PROJECT_ID_SHA256::$(cat project.sha)"

      - name: Vercel pull (prod)
        run: npx -y vercel@latest pull --yes --environment=production --token="$VERCEL_TOKEN"

      - name: Deploy to Vercel (prebuilt, prod, single)
        run: npx -y vercel@latest deploy --prebuilt --prod --yes --token="$VERCEL_TOKEN"
